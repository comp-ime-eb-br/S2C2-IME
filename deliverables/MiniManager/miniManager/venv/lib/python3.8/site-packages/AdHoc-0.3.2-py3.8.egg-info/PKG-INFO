Metadata-Version: 2.1
Name: AdHoc
Version: 0.3.2
Summary: Standalone Package Generator
Home-page: https://bitbucket.org/wolfmanx/adhoc
Author: Wolfgang Scherer
Author-email: wolfgang.scherer@gmx.de
License: GPL
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Software Distribution
Classifier: Topic :: Utilities
Classifier: Topic :: Text Processing :: Filters
Classifier: Topic :: Text Processing :: Markup

AdHoc Standalone Python Script Generator
########################################

The *AdHoc* compiler can be used as a program (see `Script Usage`_)
as well as a module (see :class:`adhoc.AdHoc`).

Since the *AdHoc* compiler itself is installed as a compiled *AdHoc*
script, it serves as its own usage example.

After installation of the *adhoc.py* script, the full source can be
obtained in directory ``__adhoc__``, by executing::

    adhoc.py --explode

Purpose
=======

*AdHoc* provides python scripts with

- template facilities
- default file generation
- standalone module inclusion

*AdHoc* has been designed to provide an implode/explode cycle:

========  =======  =========  =======  =========
source_0                               xsource_0
source_1  implode             explode  xsource_1
...       ------>  script.py  ------>  ...
source_n                               xsource_n
========  =======  =========  =======  =========

where ``xsource_i === source_i``. I.e., ``diff source_i xsource_i``
does not produce any output.

Quickstart
==========

module.py:

    # -*- coding: utf-8 -*-
    mvar = 'value'

script.py:

    # -*- coding: utf-8 -*-
    # @:adhoc_run_time:@
    import module # @:adhoc:@
    print('mvar: ' + module.mvar)

Compilation::

    adhoc.py --compile script.py >/tmp/script-compiled.py

Execution outside source directory::

    cd /tmp && python script-compiled.py

shows::

    mvar: value

Decompilation::

    cd /tmp && \
    mkdir -p __adhoc__ && \
    adhoc.py --decompile <script-compiled.py >__adhoc__/script.py



