@startuml  Diagrama de Classe
skinparam classAttributeIconSize 0

class AsyncJsonWebsocketConsumer {}

class WebSocketServer {
    + void connect()
    + void disconnect()
    + void sendMessage(data)
    + void sendMessageToRoom(roundID, data)
    - getRoomGroupName(roundID)
}

AsyncJsonWebsocketConsumer <|-- WebSocketServer

class Model {}

class Round {
    + string name
    + datetime start
    + datetime end
    + string status
    + string version
    - string old_status
    
    + save()
    + boolean isDone()
}

Model <|-- Round

package mininetWifiAdapter {
    interface IResultEventListener {
        + update(subject)
    }

    class MininetWifiExp {}
}

class ExperimentListener {
    - roundID
    - started

    + update(subject)
    - updateStatus(status)
    - sendMessage(subject)
}

IResultEventListener <|.. ExperimentListener
ExperimentListener ..> WebSocketServer
ExperimentListener ..> ExperimentsQueue

class ExperimentsQueue {
    + Queue queue
    - ExperimentsQueue instance
    - boolean busy
    - Map roundToExperimentMap
    - number currentRound

    + add (MininetWifiExp mininetWifiExp, number roundID, string medicao_schema)
    + finishExperiment(number roundID)
    + experimentFinished(number roundID)
    + instance()

    - consume()
    - startExperiment(number roundID)
    - updateRoundStatus(number roundID)
    - startCapture(number roundID, string schema)
}

package provenanceCatcher {
    class ProvenanceListener {
        + update(subject)
    }

    class ProvenanceManager {}
}

IResultEventListener <|.. ProvenanceListener

ExperimentsQueue "1" o-- "*" MininetWifiExp
ExperimentsQueue ..> ProvenanceManager
ExperimentsQueue ..> ProvenanceListener

package configurator {
    class ConfiguratorService {}
}

class View {}

class RoundView {
    + get(request, version_id)
    + post(request)
    - enqueueExperiment(configuration, roundID)
}

View <|-- RoundView
RoundView ..> ConfiguratorService
RoundView ..> ExperimentsQueue

class FinishRoundView {
    + post(request)
}

View <|-- FinishRoundView
FinishRoundView ..> ExperimentsQueue


@enduml